<?php 

// ini_set('display_errors', 1);
// error_reporting(-1);

// Read example lbox into array; could be POSTed as JSON together with IIIF base url and diameter of point glyph
$IIIF_baseurl = "https://viaeregiae.org:8183/iiif/2/saxton%2FHampshire.png/";
$glyph_d = 120; // Maximum likely pixel diameter of glyphs
$style = "style='margin:10px;border:1px black solid;' ";
$lboxStr = "lbox:rx=3975,ry=3699,px=3912,py=3751,a=-0.38150838078503974,l=371,h=41";
$lboxStr = explode(",",explode(":",$lboxStr)[1]);
$lbox = array();
foreach($lboxStr as $lboxVar){
    $lboxVar = explode("=",$lboxVar);
    $lbox[$lboxVar[0]] = $lboxVar[1];
}

function glyph(){
    global $lbox, $glyph_d, $IIIF_baseurl,$style;
    $IIIF = strval(intval($lbox["rx"] - $glyph_d/2)) . "," .
        strval(intval($lbox["ry"] - $glyph_d/2)) . "," .
        strval($glyph_d) . "," .
        strval($glyph_d);
    $IIIF_url = $IIIF_baseurl.$IIIF."/full/0/default.jpg";
    
    // Use curl to circumvent SSL restrictions
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $IIIF_url);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    $data = curl_exec($curl);
    curl_close($curl);
    return "<img ".$style."alt='tagged glyph' src='data:image/png;base64,".base64_encode($data)."' />";
}

function tag(){
    global $lbox, $glyph_d, $IIIF_baseurl,$style;
    // Calculate once only to reduce processing time
    $sin = sin($lbox["a"]);
    $cos = cos($lbox["a"]);
    
    // Calculate x and y offsets required due to rotation
    $xl_neg = abs($lbox["a"])>PI()/2 ? abs($lbox["l"]*$cos) : 0;
    $xh_neg = $lbox["a"] > 0 ? abs($lbox["h"]*$sin) : 0;
    $yh_neg = abs($lbox["a"])<PI()/2 ? abs($lbox["h"]*$cos) : 0;
    $yl_neg = $lbox["a"] > 0 ? abs($lbox["l"]*$sin) : 0;
    
    // Calculate required orthogonal snippet dimensions and dimensions of rotated snippet
    $width = intval(abs($lbox["l"]*$cos) + abs($lbox["h"]*$sin));
    $height = intval(abs($lbox["l"]*$sin) + abs($lbox["h"]*$cos));
    $rot_width = intval(abs($width * $cos) + abs($height * $sin));
    $rot_height = intval(abs($width * $sin) + abs($height * $cos));
    
    // Generate IIIF URL
    $IIIF = strval(intval($lbox["px"] - $xl_neg - $xh_neg)) . "," .
        strval(intval($lbox["py"] - $yl_neg - $yh_neg)) . "," .
        strval($width) . "," .
        strval($height);
    $IIIF_url = $IIIF_baseurl.$IIIF."/full/".(rad2deg($lbox["a"]) + ($lbox["a"]<0 ? 360 : 0))."/default.jpg";
    
    // Use curl to circumvent SSL restrictions
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $IIIF_url);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, TRUE);
    $data = curl_exec($curl);
    curl_close($curl);
    
    // Use Imagick to crop rotated snippet to original tag dimensions
    $image = new Imagick();
    if ($image->readImageBlob($data)){
        $image->cropImage($lbox["l"]-2, $lbox["h"]-2, intval(($rot_width-$lbox["l"])/2), intval(($rot_height-$lbox["h"])/2));
        return "<img ".$style."alt='tagged label' src='data:image/png;base64,".base64_encode($image)."' />";
    }
    else{
        return "Failed to read tag image.";
    }
    
}

echo glyph();
echo tag();

?>
